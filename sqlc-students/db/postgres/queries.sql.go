// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgqueries

import (
	"context"
)

const scoreAndTests = `-- name: ScoreAndTests :many
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
JOIN test_scores ON test_scores.student_id = students.id
WHERE students.id = $1
`

type ScoreAndTestsRow struct {
	Student   Student   `json:"student"`
	TestScore TestScore `json:"test_score"`
}

func (q *Queries) ScoreAndTests(ctx context.Context, studentID int64) ([]ScoreAndTestsRow, error) {
	rows, err := q.db.Query(ctx, scoreAndTests, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreAndTestsRow
	for rows.Next() {
		var i ScoreAndTestsRow
		if err := rows.Scan(
			&i.Student.ID,
			&i.Student.Name,
			&i.Student.Age,
			&i.TestScore.StudentID,
			&i.TestScore.Score,
			&i.TestScore.Grade,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scoreAndTestsFlattened = `-- name: ScoreAndTestsFlattened :many
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
JOIN test_scores ON test_scores.student_id = students.id
WHERE students.id = $1
`

type ScoreAndTestsFlattenedRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Age       int32  `json:"age"`
	StudentID int64  `json:"student_id"`
	Score     int32  `json:"score"`
	Grade     string `json:"grade"`
}

func (q *Queries) ScoreAndTestsFlattened(ctx context.Context, studentID int64) ([]ScoreAndTestsFlattenedRow, error) {
	rows, err := q.db.Query(ctx, scoreAndTestsFlattened, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreAndTestsFlattenedRow
	for rows.Next() {
		var i ScoreAndTestsFlattenedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.StudentID,
			&i.Score,
			&i.Grade,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
